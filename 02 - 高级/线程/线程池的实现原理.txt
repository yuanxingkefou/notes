http://blog.csdn.net/he90227/article/details/52576452#t1

线程池的优点是可总结为以下三点：

	1 线程复用
	2 控制最大并发数
	3 管理线程
	
1.线程复用过程

	实现线程复用的原理应该就是要保持线程处于存活状态（就绪，运行或阻塞）。接下来来看下ThreadPoolExecutor是怎么实现线程复用的。
	
	在ThreadPoolExecutor主要Worker类来控制线程的复用。看下Worker类简化后的代码，这样方便理解：
	
	private final class Worker implements Runnable {

		final Thread thread;

		Runnable firstTask;

		Worker(Runnable firstTask) {
			this.firstTask = firstTask;
			this.thread = getThreadFactory().newThread(this);
		}

		public void run() {
			runWorker(this);
		}

		final void runWorker(Worker w) {
			Runnable task = w.firstTask;
			w.firstTask = null;
			while (task != null || (task = getTask()) != null){
			task.run();
		}
	}
	
	Worker是一个Runnable，同时拥有一个thread，这个thread就是要开启的线程，在新建Worker对象时同时新建一个Thread对象，
	同时将Worker自己作为参数传入TThread，这样当Thread的start()方法调用时，运行的实际上是Worker的run()方法，接着到runWorker()中,
	有个while循环，一直从getTask()里得到Runnable对象，顺序执行。getTask()又是怎么得到Runnable对象的呢？
	
	依旧是简化后的代码：
	
	private Runnable getTask() {
		if(一些特殊情况) {
			return null;
		}

		Runnable r = workQueue.take();

		return r;
	}
	这个workQueue就是初始化ThreadPoolExecutor时存放任务的BlockingQueue队列，
	这个队列里的存放的都是将要执行的Runnable任务。
	因为BlockingQueue是个阻塞队列，BlockingQueue.take()得到如果是空，则进入等待状态直到BlockingQueue有新的对象被加入时唤醒阻塞的线程。
	所以一般情况Thread的run()方法就不会结束,而是不断执行从workQueue里的Runnable任务，这就达到了线程复用的原理了。
	