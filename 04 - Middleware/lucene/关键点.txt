索引库
1．1什么是索引库
     索引库是Lucene的重要的存储结构，它包括二部份：原始记录表，词汇表
     原始记录表：存放的是原始记录信息，Lucene为存入的内容分配一个唯一的编号
     词汇表：存放的是经过分词器拆分出来的词汇和该词汇在原始记录表中的编号
1．2为什么要将索引库进行优化
     在默认情况下，向索引库中增加一个Document对象时，索引库自动会添加一个扩展名叫*.cfs的二进制压缩文件，如果向索引库中存Document对象过多，那么*.cfs也会不断增加，同时索引库的容量也会不断增加，影响索引库的大小。
1．3索引库优化方案
     1．3．1合并cfs文件，合并后的cfs文件是二进制压缩字符，能解决是的文件大小和数量的问题 
		indexWriter.addDocument(document);
		indexWriter.optimize();
		indexWriter.close();

     1．3．2设定合并因子，自动合并cfs文件，默认10个cfs文件合并成一个cfs文件
		indexWriter.addDocument(document);
		indexWriter.setMergeFactor(3);
		indexWriter.close();

     1．3．3使用RAMDirectory，类似于内存索引库，能解决是的读取索引库文件的速度问题，
             它能以空换时，提高速度快，但不能持久保存，因此启动时加载硬盘中的索引库到内存中的索引库，退出时将内存中的索引库保存到硬盘中的索引库，且内容不能重复。
	思考：项目中，什么地方能运用这个内存索引库解决速度的思想

	
分词器
2．1什么是分词器
    采用一种算法，将中英文本中的字符拆分开来，形成词汇，以待用户输入关健字后搜索
2．2为什么要分词器
     因为用户输入的搜索的内容是一段文本中的一个关健字，和原始表中的内容有差别，
     但作为搜索引擎来讲，又得将相关的内容搜索出来，此时就得采用分词器来最大限度
     匹配原始表中的内容
2．3分词器工作流程
     步一：按分词器拆分出词汇
     步二：去除停用词和禁用词
     步三：如果有英文，把英文字母转为小写，即搜索不分大小写
2．4分词器例子图解：“我们的首都是北京呀”
2．5演示常用分词器测试，只观查结果
2．6使用第三方IKAnalyzer分词器--------中文首选
     步一：导入IKAnalyzer分词器核心jar包，IKAnalyzer3.2.0Stable.jar
     步二：将IKAnalyzer.cfg.xml和stopword.dic和xxx.dic文件复制到MyEclipse的src目录下，
			再进行配置，在配置时，首行需要一个空行
			

搜索结果高亮
3．1什么是搜索结果高亮
    在搜索结果中，将与关健字相同的字符用红色显示
	
搜索结果摘要
4．1什么是搜索结果搞要
    如果搜索结果内容太多，我们只想显示前几个字符， 必须与高亮一起使用

	搜索结果排序
5．1什么是搜索结果排序
    搜索结果是按某个或某些字段高低排序来显示的结果
5．2影响网站排名的先后的有多种
     head/meta/
     网页的标签整洁
     网页执行速度
     采用div+css
     。。。。。。
5．3Lucene中的显示结果次序与相关度得分有关
    ScoreDoc.score;
    默认情况下，Lucene是按相关度得分排序的，得分高排在前，得分低排在后
    如果相关度得分相同，按插入索引库的先后次序排序
5．4Lucene中的设置相关度得分
IndexWriter indexWriter = new IndexWriter(LuceneUtil.getDirectory(),LuceneUtil.getAnalyzer(),LuceneUtil.getMaxFieldLength());
		document.setBoost(20F);
		indexWriter.addDocument(document);
		indexWriter.close();
 5．5Lucene中按单个字段排序
	Sort sort = new Sort(new SortField("id",SortField.INT,true));
	TopDocs topDocs = indexSearcher.search(query,null,1000000,sort);
 5．6Lucene中按多个字段排序
		Sort sort = new Sort(new SortField("count",SortField.INT,true),new SortField("id",SortField.INT,true));
		TopDocs topDocs = indexSearcher.search(query,null,1000000,sort);

     在多字段排序中，只有第一个字段排序结果相同时，第二个字段排序才有作用
    提倡用数值型排序


条件搜索
6．1什么是条件搜索
    用关健字与指定的单列或多例进行匹配的搜索
6．2单字段条件搜索
QueryParser queryParser = new QueryParser(LuceneUtil.getVersion(),"content",LuceneUtil.getAnalyzer());
6．3多字段条件搜索，项目中提倡多字段搜索
QueryParser queryParser = new MultiFieldQueryParser(LuceneUtil.getVersion(),new String[]{"content","title"},LuceneUtil.getAnalyzer());
