	
	html
	<div id="grouptree" style="height: 430px;"></div>
	
	css
	<link type="text/css" rel="stylesheet" href="jstree/dist/themes/default/style.min.css" />

	js
	<script type="text/javascript" src="jstree/dist/libs/jquery.js"></script>
	<script type="text/javascript" src="jstree/dist/jstree.min.js"></script>
	
	
	$(function() {
		$('#grouptree').on("changed.jstree",function(e, data) {
			if (data.selected.length) {
				alert('The selected node is: '
					+ data.instance.get_node(data.selected[0]).text);
				}
		}).jstree({
			'core' : {
				'data' : {
					'url' : 'jSTree/returnJson', //底层封装url
					'data' : function(node) {
						return {
							'id' : node.id
						};
					}
				},
			},
			'plugins' : [ 'wholerow' ]
		})
		.on("activate_node.jstree", function(obj, e) {
			var id = e.node.id;
			if (id.charAt(0) == 4) { //判断字符串第一个字符是否为4      字符串下标以0开头
				$("#editcode").append(id.substring(id.indexOf("_") + 1)); //点击事件   此方法为第四层时向文本添加字符串切割下划线之后的内容  字符串操作包含头不包含尾
			}
		});
		var to = false; //自带搜索功能
		$('#search').click(function() {
			if (to) {
				clearTimeout(to);
			}
			to = setTimeout(function() {
				var v = $('#searchname').val();
				$('#edittree').jstree(true).search(v);
			}, 250);
		});

	});
	
	
	服务端
	VO:
	
		public class JSTreeVO {
		
			private String id;

			private String text;

			private Boolean children;

			private String icon;

			public String getText() {
				return text;
			}

			public void setText(String text) {
				this.text = text;
			}

			public Boolean getChildren() {
				return children;
			}

			public void setChildren(Boolean children) {
				this.children = children;
			}

			public String getIcon() {
				return icon;
			}

			public void setIcon(String icon) {
				this.icon = icon;
			}

			public String getId() {
				return id;
			}

			public void setId(String id) {
				this.id = id;
			}

			@Override
			public String toString() {
				return "JSTreeVO [id=" + id + ", text=" + text + ", children=" + children + ", icon=" + icon + "]";
			}

		}
	
	Controller:
	
		import java.util.ArrayList;
		import java.util.List;

		import javax.servlet.http.HttpServletRequest;
		import javax.servlet.http.HttpSession;

		import org.apache.log4j.Logger;
		import org.springframework.context.annotation.Scope;
		import org.springframework.stereotype.Controller;
		import org.springframework.web.bind.annotation.RequestMapping;
		import org.springframework.web.bind.annotation.RequestMethod;
		import org.springframework.web.bind.annotation.RequestParam;
		import org.springframework.web.bind.annotation.ResponseBody;

		import com.kedacom.tsu.model.VO.JSTreeVO;

		@Controller("jSTreeController")
		@RequestMapping("/jSTree")
		@Scope("prototype")
		public class JSTreeController {
			
			private static Logger log = Logger.getLogger(JSTreeController.class);
			
			@RequestMapping(value="/returnJson",method = RequestMethod.POST)
			@ResponseBody
			public List<JSTreeVO> retrunsoc(
					@RequestParam(value = "id", defaultValue = "#", required = false) String id,
					HttpServletRequest request, HttpSession session) {
				log.info(id);
				
				List<JSTreeVO> jsonlist = new ArrayList<JSTreeVO>();

				if ("#".equals(id)) {
					
					JSTreeVO jsTreeVO = new JSTreeVO();
					jsTreeVO.setChildren(true);
					//当设置成true时，点击该树节点，jstree就会进行一次请求，请求的url和data配置就是初始化jstree中的那些。
					//当设置成false时，jstree就将该节点当成叶子节点
					jsTreeVO.setId("1");
					jsTreeVO.setText("ROOT");
					jsonlist.add(jsTreeVO);
					
				} else if ("1".equals(id)) {// 分割拼接的字符串 _前面为层数 后面为id 
					
					JSTreeVO jsTreeVO = new JSTreeVO();
					jsTreeVO.setChildren(false);
					jsTreeVO.setId("11");
					jsTreeVO.setText("11");
					jsonlist.add(jsTreeVO);
					
					JSTreeVO jsTreeVO2 = new JSTreeVO();
					jsTreeVO2.setChildren(true);
					jsTreeVO2.setId("12");
					jsTreeVO2.setText("12");
					jsonlist.add(jsTreeVO2);
					
					JSTreeVO jsTreeVO3 = new JSTreeVO();
					jsTreeVO3.setChildren(false);
					jsTreeVO3.setId("13");
					jsTreeVO3.setText("13");
					jsonlist.add(jsTreeVO3);
					
					JSTreeVO jsTreeVO4 = new JSTreeVO();
					jsTreeVO4.setChildren(false);
					jsTreeVO4.setId("14");
					jsTreeVO4.setText("14");
					jsonlist.add(jsTreeVO4);
					
					JSTreeVO jsTreeVO5 = new JSTreeVO();
					jsTreeVO5.setChildren(false);
					jsTreeVO5.setId("15");
					jsTreeVO5.setText("15");
					jsonlist.add(jsTreeVO5);
					
					
				} else if ("12".equals(id)) {
					JSTreeVO jsTreeVO = new JSTreeVO();
					jsTreeVO.setChildren(true);
					jsTreeVO.setId("121");
					jsTreeVO.setText("121");
					jsonlist.add(jsTreeVO);
					
					JSTreeVO jsTreeVO2 = new JSTreeVO();
					jsTreeVO2.setChildren(false);
					jsTreeVO2.setId("122");
					jsTreeVO2.setText("122");
					jsonlist.add(jsTreeVO2);
					
					JSTreeVO jsTreeVO3 = new JSTreeVO();
					jsTreeVO3.setChildren(false);
					jsTreeVO3.setId("123");
					jsTreeVO3.setText("123");
					jsonlist.add(jsTreeVO3);
				} else if ("121".equals(id)) {
					JSTreeVO jsTreeVO = new JSTreeVO();
					jsTreeVO.setChildren(false);
					jsTreeVO.setId("1211");
					jsTreeVO.setText("1211");
					jsonlist.add(jsTreeVO);
					
					JSTreeVO jsTreeVO2 = new JSTreeVO();
					jsTreeVO2.setChildren(false);
					jsTreeVO2.setId("1212");
					jsTreeVO2.setText("1212");
					jsonlist.add(jsTreeVO2);
					
					JSTreeVO jsTreeVO3 = new JSTreeVO();
					jsTreeVO3.setChildren(false);
					jsTreeVO3.setId("1213");
					jsTreeVO3.setText("1213");
					jsonlist.add(jsTreeVO3);
				}
				
				return jsonlist;
			}

		}

	
	
	
	