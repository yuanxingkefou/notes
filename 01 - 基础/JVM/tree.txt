|---JVM
	|---Heap堆 所有线程共享
	|	|---老年代
	|	|---新生代
	|	|	|---Eden
	|	|	|---From Survivor
	|	|	|---To Survivor
	|	|---堆JVM调优参数
	|	|	|--- -Xms 设置堆的最小值，堆内存越大，就越不容易FullGC，越小，垃圾回收越频繁，增加垃圾回收总时间，减低吞吐量
	|	|	|--- -Xmx 设置堆的最大值
	|	|	|--- -Xmn 设置新生代的大小
	|	|	|--- -XX:NewSize 设置新生代的大小
	|	|	|--- -XX:NewRatio 设置老年代和新生代的比例
	|	|	|--- -XX:SurvivorRatio 设置新生代中 eden与survivor区的比例
	|	|	|--- -XX:TargetSurvivorRatio 设置survivor区的使用率，达到值，被送到老年代
	|---方法区 所有线程共享 持久代
	|	|--- -XX:PermSize 设置持久代初始大小
	|	|--- -XX:MaxPermSize 设置最大的持久代大小
	|---线程栈 线程私有
	|	|--- -Xss:设置线程栈的大小，堆的内存越大，线程栈的内存越大，能创建的线程数越小
	|---GC回收
	|	|---垃圾回收算法
	|	|	|--- 引用计数法 
	|	|	|	|--- 无法处理循环引用的问题，引用计数法不适合JVM的垃圾回收
	|	|	|--- 标记清除算法
	|	|	|	|--- 容易产生内存碎片，对大对象的内存分配，由于内存碎片的存在，降低分配效率
	|	|	|--- 复制算法
	|	|	|	|--- 内存折半,比较适合新生代，新生代，垃圾对象多，存活少。
	|	|	|--- 标记压缩算法
	|	|	|	|--- 既不内存折半，也不产生内存碎片，适合老年代的垃圾回收
	|	|	|--- 增量算法
	|	|	|	|--- 让垃圾回收线程和用户线程能交替执行，其他算法，都会stop the world
	|	|	|---分代
	|	|	|	|--- 比如新生代采用复制算法，老年代采用标记压缩算法
	|	|---垃圾回收器
	|	|	|---新生代串行收集器
	|	|	|	|--- 单线程，独占式的垃圾回收HotSpot虚拟机，-XX:+UseSerialGC指定新生代串行收集器和老年代串行收集器，JVM-Client模式下，是默认的垃圾回收器
	|	|	|---老年代串行收集器
	|	|	|	|--- 可以作为CMS回收器的备用回收器，-XX:UseSerialGC新生代，老年代都使用串行收集器 
	|	|	|	|--- -XX:UseParNewGC:设置新生代为并行收集。可与CMS收集同时使用
	|	|	|	|--- -XX:UseParallelGC:新生代使用并行收集器，老年代使用串行收集器
	|	|	|---并行收集器
	|	|	|	|--- 工作在新生代的垃圾收集器 多线程 独占式 并行收集器的线程数量用 -XX:ParallelGCThreads参数指定（计算公式是3+5[5*CPU_count/8]）
	|	|	|	|--- -XX:UseParNewGC:设置新生代为并行收集。可与CMS收集同时使用
	|	|	|	|--- -XX:UseConcMarkSweepGC:新生代使用并行收集器，老年代使用CMS
	|	|	|---新生代 并行回收收集器 多线程 独占式 有个重要特点 非常关注吞吐量 支持自适应 用-XX:+UseAdaptiveSizePolicy设置
	|	|	|	|--- -XX:UseParallelGC:新生代使用并行收集器，老年代使用串行收集器
	|	|	|	|--- -XX:UseParallelOldGC:新生代和老年代都使用并行收集器
	|	|	|---老年代并行回收收集器 多线程 独占式
	|	|	|	|--- -XX:UseParallelOldGC:新生代和老年代都使用并行收集器
	|	|	|---CMS收集器 关注停顿时间使用标记清除算法，多线程并行回收的收集器 非独占
	|	|	|	|--- -XX:CMSInitiatingOccupancyFaction 指定老年代使用率达到这一百分比后，进行一次CMS垃圾回收，会产生内存碎片，垃圾收集完成以后，会进行一次独占式的碎片整理
	|	|	|---G1收集器 标记-压缩算法 
	|	|	|	|--- 可以指定长度为M的用户线程，长度为N的垃圾线程，jdk1.7才使用
|---JVM参数说明
	|---JIT编译参数
	|	|--- -XX:CompileThreshold=1500  通过JIT编译器，将方法编译成机器码的触发阀值，可以理解为调用方法的次数，例如调1500次，将方法编译为机器码
	|	|--- -XX:+PrintComplilation 简单的输出一些关于从字节码转化成本地代码的编译过程。
	|	|--- -XX:CITime JVM关闭时得到各种编译的统计信息。
	|---预留对象在新生代 ：-XX:+PrintGCDetail 输出GC日志详情 -Xms20M -Xmn10M -XX:SurvivorRatio=2 如果SurvivorRatio改大 s0,s1的内存就会变小
	|---堆快照信息导出：-XX：+PrintGCDetail -Xmx10M -XX:HeapDumpPath=D:/m.hprof	