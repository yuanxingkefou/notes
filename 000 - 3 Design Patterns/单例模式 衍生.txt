https://juejin.im/post/5a61a6856fb9a01c9b6605b6


栗1

public class Singleton {
    private Singleton() {}  //私有构造函数
    private static Singleton instance = null;  //单例对象
    //静态工厂方法
    public static Singleton getInstance() {
        if (instance == null) {
            instance = new Singleton();
        }
        return instance;
    }
}

1.要想让一个类只能构建一个对象，自然不能让它随便去做new操作，因此Signleton的构造方法是私有的。
2.instance是Singleton类的静态成员，也是我们的单例对象。它的初始值可以写成Null，也可以写成new Singleton()。至于其中的区别后来会做解释。
3.getInstance是获取单例对象的方法。如果单例初始值是null，还未构建，则构建单例对象并返回。
这个写法属于单例模式当中的懒汉模式。
如果单例对象一开始就被new Singleton()主动构建，则不再需要判空操作，这种写法属于饿汉模式。
这两个名字很形象：饿汉主动找食物吃，懒汉躺在地上等着人喂。

问题：栗1线程不安全

栗2
public class Singleton {
    private Singleton() {}  //私有构造函数
   private static Singleton instance = null;  //单例对象
   //静态工厂方法
   public static Singleton getInstance() {
        if (instance == null) {      //双重检测机制
         synchronized (Singleton.class){  //同步锁
           if (instance == null) {     //双重检测机制
             instance = new Singleton();
               }
            }
         }
        return instance;
    }
}
1.为了防止new Singleton被执行多次，因此在new操作之前加上Synchronized 同步锁，锁住整个类（注意，这里不能使用对象锁）。
2.进入Synchronized 临界区以后，还要再做一次判空。因为当两个线程同时访问的时候，线程A构建完对象，线程B也已经通过了最初的判空验证，不做第二次判空的话，线程B还是会再次构建instance对象。

问题：栗2
这种情况表面看似没什么问题，
要么Instance还没被线程A构建，线程B执行 if（instance == null）的时候得到true；
要么Instance已经被线程A构建完成，线程B执行 if（instance == null）的时候得到false。

这里涉及到了JVM编译器的指令重排。
指令重排是什么意思呢？比如java中简单的一句 instance = new Singleton，会被编译器编译成如下JVM指令：
memory =allocate();    //1：分配对象的内存空间 
ctorInstance(memory);  //2：初始化对象 
instance =memory;     //3：设置instance指向刚分配的内存地址 
但是这些指令顺序并非一成不变，有可能会经过JVM和CPU的优化，指令重排成下面的顺序：
memory =allocate();    //1：分配对象的内存空间 
instance =memory;     //3：设置instance指向刚分配的内存地址
ctorInstance(memory);  //2：初始化对象 当线程A执行完1,3,时，instance对象还未完成初始化，但已经不再指向null。
此时如果线程B抢占到CPU资源，执行  if（instance == null）的结果会是false，从而返回一个没有初始化完成的instance对象。

我们需要在instance对象前面增加一个修饰符volatile。

栗3
public class Singleton {
    private Singleton() {}  //私有构造函数
    private volatile static Singleton instance = null;  //单例对象
    //静态工厂方法
    public static Singleton getInstance() {
          if (instance == null) {      //双重检测机制			
         synchronized (Singleton.class){  //同步锁
           if (instance == null) {     //双重检测机制			双重检测
             instance = new Singleton();
                }
             }
          }
          return instance;
      }
}

The volatile keyword indicates that a value may change between different accesses, 
it prevents an optimizing compiler from optimizing away subsequent reads or writes and thus incorrectly reusing a stale value or omitting writes.

经过volatile的修饰，当线程A执行instance = new Singleton的时候，JVM执行顺序是什么样？
始终保证是下面的顺序：
memory =allocate();    //1：分配对象的内存空间 
ctorInstance(memory);  //2：初始化对象 
instance =memory;     //3：设置instance指向刚分配的内存地址 
如此在线程B看来，instance对象的引用要么指向null，要么指向一个初始化完毕的Instance，而不会出现某个中间态，保证了安全。


栗4 用静态内部类实现单例模式
public class Singleton {
    private static class LazyHolder {
        private static final Singleton INSTANCE = new Singleton();
    }
    private Singleton (){}
    public static Singleton getInstance() {
        return LazyHolder.INSTANCE;
    }
}

1.从外部无法访问静态内部类LazyHolder，只有当调用Singleton.getInstance方法的时候，才能得到单例对象INSTANCE。
2.INSTANCE对象初始化的时机并不是在单例类Singleton被加载的时候，而是在调用getInstance方法，使得静态内部类LazyHolder被加载的时候。
因此这种实现方式是利用classloader的加载机制来实现懒加载，并保证构建单例的线程安全。


利用反射打破单例模式的约束

利用反射打破单例：
//获得构造器
Constructor con = Singleton.class.getDeclaredConstructor();
//设置为可访问
con.setAccessible(true);
//构造两个不同的对象
Singleton singleton1 = (Singleton)con.newInstance();
Singleton singleton2 = (Singleton)con.newInstance();
//验证是否是不同对象
System.out.println(singleton1.equals(singleton2));

代码可以简单归纳为三个步骤：


第一步，获得单例类的构造器。


第二步，把构造器设置为可访问。


第三步，使用newInstance方法构造对象。


最后为了确认这两个对象是否真的是不同的对象，我们使用equals方法进行比较。毫无疑问，比较结果是false。 

栗5 用枚举实现单例模式：  阻止反射构造方法

public enum SingletonEnum {
    INSTANCE;
}

JVM会阻止反射获取枚举类的私有构造方法

//获得构造器
Constructor con = SingletonEnum.class.getDeclaredConstructor();
//设置为可访问
con.setAccessible(true);
//构造两个不同的对象
SingletonEnum singleton1 = (SingletonEnum)con.newInstance();
SingletonEnum singleton2 = (SingletonEnum)con.newInstance();
//验证是否是不同对象
System.out.println(singleton1.equals(singleton2));


执行获得构造器这一步的时候，抛出了如下异常：
Exception in thread "main" java.lang.NoSuchMethodException: com.xiaohui.singleton.test.SingletonEnum.<init>()	at java.lang.Class.getConstructor0(Class.java:2892)	at java.lang.Class.getDeclaredConstructor(Class.java:2058)	at com.xiaohui.singleton.test.SingletonTest.main(SingletonTest.java:22)	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)	at java.lang.reflect.Method.invoke(Method.java:606)	at com.intellij.rt.execution.application.AppMain.main(AppMain.java:134)

缺点 非使用懒加载 单例对象是在枚举类被加载的时候进行初始化的。


总结 
单例 
懒汉模式 会出现 线程不安全 ，使用synchronize 和 volatile 双重锁  避免线程安全
静态内部类 线程安全 也是懒加载
饿汉模式 不会出现线程不安全，但是一开始不管用不用都初始化,这本身是和业界流行的资源使用习惯相违背的

枚举 防止反射 线程安全 不是懒加载









